// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AssignSignerToCertificate extends ethereum.Event {
  get params(): AssignSignerToCertificate__Params {
    return new AssignSignerToCertificate__Params(this);
  }
}

export class AssignSignerToCertificate__Params {
  _event: AssignSignerToCertificate;

  constructor(event: AssignSignerToCertificate) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get idCertificate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get asignedSigner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get role(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get timeAssigned(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CertificateCreated extends ethereum.Event {
  get params(): CertificateCreated__Params {
    return new CertificateCreated__Params(this);
  }
}

export class CertificateCreated__Params {
  _event: CertificateCreated;

  constructor(event: CertificateCreated) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get ID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get ownerNim(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get jenisSertifikat(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get signedTimes(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get signRequired(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get timeCreated(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class CertificatePublished extends ethereum.Event {
  get params(): CertificatePublished__Params {
    return new CertificatePublished__Params(this);
  }
}

export class CertificatePublished__Params {
  _event: CertificatePublished;

  constructor(event: CertificatePublished) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timePublished(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CertificateSigned extends ethereum.Event {
  get params(): CertificateSigned__Params {
    return new CertificateSigned__Params(this);
  }
}

export class CertificateSigned__Params {
  _event: CertificateSigned;

  constructor(event: CertificateSigned) {
    this._event = event;
  }

  get signer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get role(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get signedTimes(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get timeSigned(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CertificateSignedByOwner extends ethereum.Event {
  get params(): CertificateSignedByOwner__Params {
    return new CertificateSignedByOwner__Params(this);
  }
}

export class CertificateSignedByOwner__Params {
  _event: CertificateSignedByOwner;

  constructor(event: CertificateSignedByOwner) {
    this._event = event;
  }

  get signer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timeSigned(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CertificateUpdated extends ethereum.Event {
  get params(): CertificateUpdated__Params {
    return new CertificateUpdated__Params(this);
  }
}

export class CertificateUpdated__Params {
  _event: CertificateUpdated;

  constructor(event: CertificateUpdated) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get ID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newIpfsHash(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get oldIpfsHash(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get isUpdateNINAData(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }

  get timeUpdated(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class IjazahDinomorkan extends ethereum.Event {
  get params(): IjazahDinomorkan__Params {
    return new IjazahDinomorkan__Params(this);
  }
}

export class IjazahDinomorkan__Params {
  _event: IjazahDinomorkan;

  constructor(event: IjazahDinomorkan) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get noIjazah(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get timeUpdated(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class InterfaceUpdated extends ethereum.Event {
  get params(): InterfaceUpdated__Params {
    return new InterfaceUpdated__Params(this);
  }
}

export class InterfaceUpdated__Params {
  _event: InterfaceUpdated;

  constructor(event: InterfaceUpdated) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get jenis(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get timeUpdated(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RiwayatCreated extends ethereum.Event {
  get params(): RiwayatCreated__Params {
    return new RiwayatCreated__Params(this);
  }
}

export class RiwayatCreated__Params {
  _event: RiwayatCreated;

  constructor(event: RiwayatCreated) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nim(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get ampuId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get nilai(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get timeCreated(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class RiwayatUpdated extends ethereum.Event {
  get params(): RiwayatUpdated__Params {
    return new RiwayatUpdated__Params(this);
  }
}

export class RiwayatUpdated__Params {
  _event: RiwayatUpdated;

  constructor(event: RiwayatUpdated) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get oldNilai(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get newNilai(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get timeUpdated(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SertifikatHelper__getCertificateOfOwnerResult {
  value0: i32;
  value1: i32;
  value2: Address;
  value3: Bytes;
  value4: Bytes;
  value5: Bytes;

  constructor(
    value0: i32,
    value1: i32,
    value2: Address,
    value3: Bytes,
    value4: Bytes,
    value5: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    map.set("value4", ethereum.Value.fromBytes(this.value4));
    map.set("value5", ethereum.Value.fromBytes(this.value5));
    return map;
  }
}

export class SertifikatHelper__getCertificateOfSignerResult {
  value0: i32;
  value1: i32;
  value2: Address;
  value3: Bytes;
  value4: Bytes;

  constructor(
    value0: i32,
    value1: i32,
    value2: Address,
    value3: Bytes,
    value4: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    map.set("value4", ethereum.Value.fromBytes(this.value4));
    return map;
  }
}

export class SertifikatHelper__getPublishedCertificateResult {
  value0: i32;
  value1: i32;
  value2: Address;
  value3: Bytes;
  value4: Bytes;

  constructor(
    value0: i32,
    value1: i32,
    value2: Address,
    value3: Bytes,
    value4: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    map.set("value4", ethereum.Value.fromBytes(this.value4));
    return map;
  }
}

export class SertifikatHelper__getRiwayatStudiResult {
  value0: BigInt;
  value1: Bytes;
  value2: Bytes;

  constructor(value0: BigInt, value1: Bytes, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    return map;
  }
}

export class SertifikatHelper__getSignatureResult {
  value0: boolean;
  value1: Bytes;
  value2: Address;
  value3: Bytes;

  constructor(value0: boolean, value1: Bytes, value2: Address, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromBytes(this.value3));
    return map;
  }
}

export class SertifikatHelper extends ethereum.SmartContract {
  static bind(address: Address): SertifikatHelper {
    return new SertifikatHelper("SertifikatHelper", address);
  }

  getCertificateOfOwner(
    certificateId: BigInt
  ): SertifikatHelper__getCertificateOfOwnerResult {
    let result = super.call(
      "getCertificateOfOwner",
      "getCertificateOfOwner(uint256):(uint8,uint8,address,bytes16,bytes,bytes)",
      [ethereum.Value.fromUnsignedBigInt(certificateId)]
    );

    return new SertifikatHelper__getCertificateOfOwnerResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toAddress(),
      result[3].toBytes(),
      result[4].toBytes(),
      result[5].toBytes()
    );
  }

  try_getCertificateOfOwner(
    certificateId: BigInt
  ): ethereum.CallResult<SertifikatHelper__getCertificateOfOwnerResult> {
    let result = super.tryCall(
      "getCertificateOfOwner",
      "getCertificateOfOwner(uint256):(uint8,uint8,address,bytes16,bytes,bytes)",
      [ethereum.Value.fromUnsignedBigInt(certificateId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SertifikatHelper__getCertificateOfOwnerResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toAddress(),
        value[3].toBytes(),
        value[4].toBytes(),
        value[5].toBytes()
      )
    );
  }

  getCertificateOfSigner(
    certificateId: BigInt,
    role: Bytes
  ): SertifikatHelper__getCertificateOfSignerResult {
    let result = super.call(
      "getCertificateOfSigner",
      "getCertificateOfSigner(uint256,bytes9):(uint8,uint8,address,bytes16,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(certificateId),
        ethereum.Value.fromFixedBytes(role)
      ]
    );

    return new SertifikatHelper__getCertificateOfSignerResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toAddress(),
      result[3].toBytes(),
      result[4].toBytes()
    );
  }

  try_getCertificateOfSigner(
    certificateId: BigInt,
    role: Bytes
  ): ethereum.CallResult<SertifikatHelper__getCertificateOfSignerResult> {
    let result = super.tryCall(
      "getCertificateOfSigner",
      "getCertificateOfSigner(uint256,bytes9):(uint8,uint8,address,bytes16,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(certificateId),
        ethereum.Value.fromFixedBytes(role)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SertifikatHelper__getCertificateOfSignerResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toAddress(),
        value[3].toBytes(),
        value[4].toBytes()
      )
    );
  }

  getPublishedCertificate(
    ipfsHash: Bytes
  ): SertifikatHelper__getPublishedCertificateResult {
    let result = super.call(
      "getPublishedCertificate",
      "getPublishedCertificate(bytes):(uint8,uint8,address,bytes16,bytes)",
      [ethereum.Value.fromBytes(ipfsHash)]
    );

    return new SertifikatHelper__getPublishedCertificateResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toAddress(),
      result[3].toBytes(),
      result[4].toBytes()
    );
  }

  try_getPublishedCertificate(
    ipfsHash: Bytes
  ): ethereum.CallResult<SertifikatHelper__getPublishedCertificateResult> {
    let result = super.tryCall(
      "getPublishedCertificate",
      "getPublishedCertificate(bytes):(uint8,uint8,address,bytes16,bytes)",
      [ethereum.Value.fromBytes(ipfsHash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SertifikatHelper__getPublishedCertificateResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toAddress(),
        value[3].toBytes(),
        value[4].toBytes()
      )
    );
  }

  getRiwayatStudi(riwayatId: BigInt): SertifikatHelper__getRiwayatStudiResult {
    let result = super.call(
      "getRiwayatStudi",
      "getRiwayatStudi(uint256):(uint256,bytes2,bytes12)",
      [ethereum.Value.fromUnsignedBigInt(riwayatId)]
    );

    return new SertifikatHelper__getRiwayatStudiResult(
      result[0].toBigInt(),
      result[1].toBytes(),
      result[2].toBytes()
    );
  }

  try_getRiwayatStudi(
    riwayatId: BigInt
  ): ethereum.CallResult<SertifikatHelper__getRiwayatStudiResult> {
    let result = super.tryCall(
      "getRiwayatStudi",
      "getRiwayatStudi(uint256):(uint256,bytes2,bytes12)",
      [ethereum.Value.fromUnsignedBigInt(riwayatId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SertifikatHelper__getRiwayatStudiResult(
        value[0].toBigInt(),
        value[1].toBytes(),
        value[2].toBytes()
      )
    );
  }

  getSignature(
    certificateId: BigInt,
    role: Bytes
  ): SertifikatHelper__getSignatureResult {
    let result = super.call(
      "getSignature",
      "getSignature(uint256,bytes9):(bool,bytes9,address,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(certificateId),
        ethereum.Value.fromFixedBytes(role)
      ]
    );

    return new SertifikatHelper__getSignatureResult(
      result[0].toBoolean(),
      result[1].toBytes(),
      result[2].toAddress(),
      result[3].toBytes()
    );
  }

  try_getSignature(
    certificateId: BigInt,
    role: Bytes
  ): ethereum.CallResult<SertifikatHelper__getSignatureResult> {
    let result = super.tryCall(
      "getSignature",
      "getSignature(uint256,bytes9):(bool,bytes9,address,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(certificateId),
        ethereum.Value.fromFixedBytes(role)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SertifikatHelper__getSignatureResult(
        value[0].toBoolean(),
        value[1].toBytes(),
        value[2].toAddress(),
        value[3].toBytes()
      )
    );
  }

  verifyCertificate(
    certificateId: BigInt,
    ownerSignature: Bytes,
    signature: Bytes,
    role: Bytes,
    hash: Bytes
  ): boolean {
    let result = super.call(
      "verifyCertificate",
      "verifyCertificate(uint256,bytes,bytes,bytes9,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(certificateId),
        ethereum.Value.fromBytes(ownerSignature),
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromFixedBytes(hash)
      ]
    );

    return result[0].toBoolean();
  }

  try_verifyCertificate(
    certificateId: BigInt,
    ownerSignature: Bytes,
    signature: Bytes,
    role: Bytes,
    hash: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyCertificate",
      "verifyCertificate(uint256,bytes,bytes,bytes9,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(certificateId),
        ethereum.Value.fromBytes(ownerSignature),
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromFixedBytes(hash)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  verifyCertificateOwner(
    certificateId: BigInt,
    hash: Bytes,
    signature: Bytes
  ): boolean {
    let result = super.call(
      "verifyCertificateOwner",
      "verifyCertificateOwner(uint256,bytes32,bytes):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(certificateId),
        ethereum.Value.fromFixedBytes(hash),
        ethereum.Value.fromBytes(signature)
      ]
    );

    return result[0].toBoolean();
  }

  try_verifyCertificateOwner(
    certificateId: BigInt,
    hash: Bytes,
    signature: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyCertificateOwner",
      "verifyCertificateOwner(uint256,bytes32,bytes):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(certificateId),
        ethereum.Value.fromFixedBytes(hash),
        ethereum.Value.fromBytes(signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  verifySignature(hash: Bytes, signature: Bytes): Address {
    let result = super.call(
      "verifySignature",
      "verifySignature(bytes32,bytes):(address)",
      [ethereum.Value.fromFixedBytes(hash), ethereum.Value.fromBytes(signature)]
    );

    return result[0].toAddress();
  }

  try_verifySignature(
    hash: Bytes,
    signature: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "verifySignature",
      "verifySignature(bytes32,bytes):(address)",
      [ethereum.Value.fromFixedBytes(hash), ethereum.Value.fromBytes(signature)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AssignSignerCall extends ethereum.Call {
  get inputs(): AssignSignerCall__Inputs {
    return new AssignSignerCall__Inputs(this);
  }

  get outputs(): AssignSignerCall__Outputs {
    return new AssignSignerCall__Outputs(this);
  }
}

export class AssignSignerCall__Inputs {
  _call: AssignSignerCall;

  constructor(call: AssignSignerCall) {
    this._call = call;
  }

  get idCertificate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get assignedSigner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get role(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class AssignSignerCall__Outputs {
  _call: AssignSignerCall;

  constructor(call: AssignSignerCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get accountManagerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get civitasHelperAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get akademikHelperAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeNilaiRiwayatStudiCall extends ethereum.Call {
  get inputs(): ChangeNilaiRiwayatStudiCall__Inputs {
    return new ChangeNilaiRiwayatStudiCall__Inputs(this);
  }

  get outputs(): ChangeNilaiRiwayatStudiCall__Outputs {
    return new ChangeNilaiRiwayatStudiCall__Outputs(this);
  }
}

export class ChangeNilaiRiwayatStudiCall__Inputs {
  _call: ChangeNilaiRiwayatStudiCall;

  constructor(call: ChangeNilaiRiwayatStudiCall) {
    this._call = call;
  }

  get riwayatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get semesterId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ampuId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get dosenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get dosenNip(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get nilai(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class ChangeNilaiRiwayatStudiCall__Outputs {
  _call: ChangeNilaiRiwayatStudiCall;

  constructor(call: ChangeNilaiRiwayatStudiCall) {
    this._call = call;
  }
}

export class CreateSertifikatCall extends ethereum.Call {
  get inputs(): CreateSertifikatCall__Inputs {
    return new CreateSertifikatCall__Inputs(this);
  }

  get outputs(): CreateSertifikatCall__Outputs {
    return new CreateSertifikatCall__Outputs(this);
  }
}

export class CreateSertifikatCall__Inputs {
  _call: CreateSertifikatCall;

  constructor(call: CreateSertifikatCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ownerNim(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get jenisSertifikat(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get signRequired(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get ipfsHash(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get signerList(): Array<Address> {
    return this._call.inputValues[5].value.toAddressArray();
  }

  get roleList(): Array<Bytes> {
    return this._call.inputValues[6].value.toBytesArray();
  }
}

export class CreateSertifikatCall__Outputs {
  _call: CreateSertifikatCall;

  constructor(call: CreateSertifikatCall) {
    this._call = call;
  }
}

export class PengisianNilaiMatkulCall extends ethereum.Call {
  get inputs(): PengisianNilaiMatkulCall__Inputs {
    return new PengisianNilaiMatkulCall__Inputs(this);
  }

  get outputs(): PengisianNilaiMatkulCall__Outputs {
    return new PengisianNilaiMatkulCall__Outputs(this);
  }
}

export class PengisianNilaiMatkulCall__Inputs {
  _call: PengisianNilaiMatkulCall;

  constructor(call: PengisianNilaiMatkulCall) {
    this._call = call;
  }

  get semesterId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get ampuId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get dosenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get dosenNip(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get mahasiswaNim(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get nilai(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class PengisianNilaiMatkulCall__Outputs {
  _call: PengisianNilaiMatkulCall;

  constructor(call: PengisianNilaiMatkulCall) {
    this._call = call;
  }
}

export class PenomoranIjazahCall extends ethereum.Call {
  get inputs(): PenomoranIjazahCall__Inputs {
    return new PenomoranIjazahCall__Inputs(this);
  }

  get outputs(): PenomoranIjazahCall__Outputs {
    return new PenomoranIjazahCall__Outputs(this);
  }
}

export class PenomoranIjazahCall__Inputs {
  _call: PenomoranIjazahCall;

  constructor(call: PenomoranIjazahCall) {
    this._call = call;
  }

  get certificateId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get noIjazah(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class PenomoranIjazahCall__Outputs {
  _call: PenomoranIjazahCall;

  constructor(call: PenomoranIjazahCall) {
    this._call = call;
  }
}

export class PublishCertificateCall extends ethereum.Call {
  get inputs(): PublishCertificateCall__Inputs {
    return new PublishCertificateCall__Inputs(this);
  }

  get outputs(): PublishCertificateCall__Outputs {
    return new PublishCertificateCall__Outputs(this);
  }
}

export class PublishCertificateCall__Inputs {
  _call: PublishCertificateCall;

  constructor(call: PublishCertificateCall) {
    this._call = call;
  }

  get certificateId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PublishCertificateCall__Outputs {
  _call: PublishCertificateCall;

  constructor(call: PublishCertificateCall) {
    this._call = call;
  }
}

export class SignCertificateCall extends ethereum.Call {
  get inputs(): SignCertificateCall__Inputs {
    return new SignCertificateCall__Inputs(this);
  }

  get outputs(): SignCertificateCall__Outputs {
    return new SignCertificateCall__Outputs(this);
  }
}

export class SignCertificateCall__Inputs {
  _call: SignCertificateCall;

  constructor(call: SignCertificateCall) {
    this._call = call;
  }

  get certificateId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get role(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SignCertificateCall__Outputs {
  _call: SignCertificateCall;

  constructor(call: SignCertificateCall) {
    this._call = call;
  }
}

export class SignCertificateByOwnerCall extends ethereum.Call {
  get inputs(): SignCertificateByOwnerCall__Inputs {
    return new SignCertificateByOwnerCall__Inputs(this);
  }

  get outputs(): SignCertificateByOwnerCall__Outputs {
    return new SignCertificateByOwnerCall__Outputs(this);
  }
}

export class SignCertificateByOwnerCall__Inputs {
  _call: SignCertificateByOwnerCall;

  constructor(call: SignCertificateByOwnerCall) {
    this._call = call;
  }

  get certificateId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SignCertificateByOwnerCall__Outputs {
  _call: SignCertificateByOwnerCall;

  constructor(call: SignCertificateByOwnerCall) {
    this._call = call;
  }
}

export class UpdateAccountManagerCall extends ethereum.Call {
  get inputs(): UpdateAccountManagerCall__Inputs {
    return new UpdateAccountManagerCall__Inputs(this);
  }

  get outputs(): UpdateAccountManagerCall__Outputs {
    return new UpdateAccountManagerCall__Outputs(this);
  }
}

export class UpdateAccountManagerCall__Inputs {
  _call: UpdateAccountManagerCall;

  constructor(call: UpdateAccountManagerCall) {
    this._call = call;
  }

  get newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateAccountManagerCall__Outputs {
  _call: UpdateAccountManagerCall;

  constructor(call: UpdateAccountManagerCall) {
    this._call = call;
  }
}

export class UpdateAkademikHelperCall extends ethereum.Call {
  get inputs(): UpdateAkademikHelperCall__Inputs {
    return new UpdateAkademikHelperCall__Inputs(this);
  }

  get outputs(): UpdateAkademikHelperCall__Outputs {
    return new UpdateAkademikHelperCall__Outputs(this);
  }
}

export class UpdateAkademikHelperCall__Inputs {
  _call: UpdateAkademikHelperCall;

  constructor(call: UpdateAkademikHelperCall) {
    this._call = call;
  }

  get newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateAkademikHelperCall__Outputs {
  _call: UpdateAkademikHelperCall;

  constructor(call: UpdateAkademikHelperCall) {
    this._call = call;
  }
}

export class UpdateCertificateDataCall extends ethereum.Call {
  get inputs(): UpdateCertificateDataCall__Inputs {
    return new UpdateCertificateDataCall__Inputs(this);
  }

  get outputs(): UpdateCertificateDataCall__Outputs {
    return new UpdateCertificateDataCall__Outputs(this);
  }
}

export class UpdateCertificateDataCall__Inputs {
  _call: UpdateCertificateDataCall;

  constructor(call: UpdateCertificateDataCall) {
    this._call = call;
  }

  get idCertificate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newIpfsHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get isUpdateNINAData(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class UpdateCertificateDataCall__Outputs {
  _call: UpdateCertificateDataCall;

  constructor(call: UpdateCertificateDataCall) {
    this._call = call;
  }
}

export class UpdateCivitasHelperCall extends ethereum.Call {
  get inputs(): UpdateCivitasHelperCall__Inputs {
    return new UpdateCivitasHelperCall__Inputs(this);
  }

  get outputs(): UpdateCivitasHelperCall__Outputs {
    return new UpdateCivitasHelperCall__Outputs(this);
  }
}

export class UpdateCivitasHelperCall__Inputs {
  _call: UpdateCivitasHelperCall;

  constructor(call: UpdateCivitasHelperCall) {
    this._call = call;
  }

  get newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateCivitasHelperCall__Outputs {
  _call: UpdateCivitasHelperCall;

  constructor(call: UpdateCivitasHelperCall) {
    this._call = call;
  }
}
